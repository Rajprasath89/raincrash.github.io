<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bits, Pixels and Atoms</title>
    <description>Sricharan Chiruvolu's Blog</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>[Pysoy] - Pysoy Development, Part Two</title>
        <description>&lt;p&gt;A long time ago, I have written an introductory &lt;a href=&quot;/gsoc/2015/04/22/pysoy-pysoy-development-part-one/&quot;&gt;article on pysoy&lt;/a&gt;, now after a few weeks here&amp;rsquo;s the &lt;em&gt;Part Two&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I would love to give an introduction about how the background stuff happens in the &lt;em&gt;soy &lt;/em&gt;module. Pysoy is just the CPython wrapper of &lt;em&gt;Libsoy&lt;/em&gt;, which is the neural schema, the place where all the magic happens.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Libsoy&lt;/em&gt; is written in Genie and C. Genie is a comrade of Vala, both developed under the GNOME project. They use the GObject system and complie to C. Genie had a very few resources I could get my hands on, nevertheless, the language seems to be developer friendly. The syntax is very much similar to python. I really loved the paradigms used, esp. the properties and ownership stuff. (see: &lt;a href=&quot;https://wiki.gnome.org/Projects/Genie&quot;&gt;Projects/Genie&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Genie allows you to write pretty high level stuff in very less LOC. All you have to do is write the C Wrappers and as Genie uses a &amp;lsquo;valac&amp;rsquo; compiler to compile to C, you can achieve C-like speeds. The CPython PyObject API helps us to wrap a python module around this. A python module that runs on C and written in Genie. This is exactly what Libsoy + Pysoy is. Fascinating, huh!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a catch of course! You can&amp;rsquo;t just go away with the nice Genie logic. Whenever the CPython entry points a.k.a the public API used by python is changed, you need to write the essential CPython wrappers, add necessary bindings e.t.c. Yes, for every function of every object. Which might be a daunting process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sricharanized.files.wordpress.com/2015/06/pygtk-splash.jpg&quot;&gt;&lt;img src=&quot;https://sricharanized.files.wordpress.com/2015/06/pygtk-splash.jpg&quot; alt=&quot;pygtk-splash&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that&amp;rsquo;s it. You have Libsoy, you write your logic in Genie. The valac complier genie uses generates C code. That&amp;rsquo;s what Libsoy is all about. Next, you write wrappers (using PyObject C API), you get a really cool CPython based module. That&amp;rsquo;s what Pysoy is about. The game developer is abstracted with a really nice &lt;em&gt;soy&lt;/em&gt; module for import.&lt;/p&gt;

&lt;p&gt;The engine is in it&amp;rsquo;s infant stage. It&amp;rsquo;s being developed by many students around the world at an impressive speed though. The project would also include Lightmelody and Playerd modules which would handle the networking and controller stuff respectively of the this 3D cloud based engine for multiple platforms.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jun 2015 16:48:47 +0530</pubDate>
        <link>/gsoc/2015/06/05/pysoy-pysoy-development-part-two/</link>
        <guid isPermaLink="true">/gsoc/2015/06/05/pysoy-pysoy-development-part-two/</guid>
      </item>
    
      <item>
        <title>The new web development trends</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://sricharanized.files.wordpress.com/2015/06/slide5.jpg?w=300&quot; alt=&quot;slide5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was introduced HTML in my 7th grade. I still remember the day when I created a &amp;lsquo;click me&amp;rsquo; button in javascript and CSS. It was fascinating. We had a decent computer science lab in school, where we secretly accessed pokemoncrater.com which worked like magic. The world of web development and computer science changed a lot in these eight years. (see: &lt;a href=&quot;http://en.wikipedia.org/wiki/Moore%27s_law&quot;&gt;Moore&amp;rsquo;s Law&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We now have, half a dozen of languages, a handful of database systems, a dozen of javascript frameworks, deployment techniques, paradigms and technologies to ponder before we could start a project. The usual HTML+ CSS + JS + PHP + MySQL style is no longer mainstream. Single page applications, Responsive design, MEAN stack e.t.c. are the new treads of web development. Android/ iOS knowledge, machine learning are added bonuses. By the time you learn all these, a whole new set of technologies will have replaced them.&lt;/p&gt;

&lt;p&gt;So, What does an up-and-coming full-stack developer do?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stacks &lt;/em&gt;are a lot bigger than they used to be. And being able to claim one has acquired refined skills at every layer of web development is certainly not a big claim. That would mean you have a broad range of skills or you&amp;rsquo;re an expert on nothing.&lt;/p&gt;

&lt;p&gt;LAMP was a trend of 2010. It&amp;rsquo;s now obselete. A full-stack developer would program both the client-side logic and the front-end design. The only reason he (or she) could do that is because the &lt;em&gt;Full-stack&lt;/em&gt; meant less layers. Either I am too young to criticize or maybe I just don&amp;rsquo;t like the term, but there won&amp;rsquo;t be any full-stack web developers in the near future.&lt;/p&gt;

&lt;p&gt;With that being said, I feel, the skill to learn new skills is the only skill in CS. And so, I am planning to blog a new web dev article every week, mostly about the latest technologies and paradigms of web design and developent. This would be about web servers, client+sever side javascript development, NoSQL database systems e.t.c. Also, this won&amp;rsquo;t effect my weekly GSoC/ PySoy update.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jun 2015 15:28:22 +0530</pubDate>
        <link>/web%20dev/2015/06/05/the-new-web-development-treads/</link>
        <guid isPermaLink="true">/web%20dev/2015/06/05/the-new-web-development-treads/</guid>
      </item>
    
      <item>
        <title>[GSoC] week 0: Vala/ genie wrestle</title>
        <description>&lt;p&gt;Hola!&lt;/p&gt;

&lt;p&gt;The first week of Google Summer of Code came to an end. This week hadn&amp;rsquo;t been much of coding, but a decent amount of reading docs, understanding codebase and of course, enjoying the welcome gifts (and my first stipend!).&lt;/p&gt;

&lt;p&gt;Man, the Genie/ Vala (It&amp;rsquo;s Genie actually, but it&amp;rsquo;s almost similar to Vala in most aspects) is a really cool language. It&amp;rsquo;s crisp, easy to code and understand. But there are very few resources available. The only two major ones are of course, the Genie offical tutorial and the Vala docs (that should be enough, isn&amp;rsquo;t it?).&lt;/p&gt;

&lt;p&gt;Well, this was a slow start from my side (really slow!). On my very first day, I made six pushes, that fixed five examples &lt;em&gt;(namely, void.py, planar.py, multiple_lights.py, eyecandy_scripy.py and eyecandy_script2.py)&lt;/em&gt;. For the last three days, there wasn&amp;rsquo;t any push from me (I have been a sloth!). I am planning to add Spotlights to the light.gs really soon.&lt;/p&gt;

&lt;p&gt;Next best part of the week, the welcome pack and the first payment. I don&amp;rsquo;t know if this happens to all but my welcome pack got stuck at customs and I had to submit a couple of authorization and KYC forms to get it back.  And it finally arrived. I got to see the miracle pen/pencil everyone is talking about. &lt;em&gt;Edit: At first, fellow gsocers were really confused how to use this. Finally someone figured it out. &lt;/em&gt;I bought a new smartphone with my first stipend, my xperia grew old.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sricharanized.files.wordpress.com/2015/05/wp_20150529_20_34_52_rich.jpg&quot;&gt;&lt;img src=&quot;https://sricharanized.files.wordpress.com/2015/05/wp_20150529_20_34_52_rich.jpg?w=300&quot; alt=&quot;WP_20150529_20_34_52_Rich&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I am writing an article on &amp;ldquo;Introduction to Computer Graphics with OpenGL&amp;rdquo; for the Open Source for You magazine. Thanks to my friends at #amfoss who suggested me to do so. Hope it gets published.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 May 2015 21:41:11 +0530</pubDate>
        <link>/gsoc/2015/05/29/week-0-gsoc15-vala-genie-wrestle-example-fixing-and-welcome-packs/</link>
        <guid isPermaLink="true">/gsoc/2015/05/29/week-0-gsoc15-vala-genie-wrestle-example-fixing-and-welcome-packs/</guid>
      </item>
    
      <item>
        <title>Understanding FOSS</title>
        <description>&lt;p&gt;&lt;em&gt;So, I&amp;rsquo;m hooked up with Quora these days.  I came across this question,&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&quot;How can I understand the idea of the Open Source movement better? - I want to know what motivated you to move to using Open Source-d technologies, Open Source-d stacks, and anything Open Source related ?Also, I want to understand how the Open Source community works, and why, as a CS student, should I at least be familiar with the idea of Open Source.&quot;&lt;/blockquote&gt;


&lt;p&gt;I spent a decent amout of time writing the answer (and I loved what I wrote). I thought my answer should definitely be on my blog. Here it goes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sricharanized.files.wordpress.com/2015/05/foss-590x300.jpg&quot;&gt;&lt;img src=&quot;https://sricharanized.files.wordpress.com/2015/05/foss-590x300.jpg?w=300&quot; alt=&quot;FOSS-590x300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why use open-source technology?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to create new applications quickly, reliably and economically is drawing businesses big and small to open source and emboldening them to use it for ever-larger projects. Open source is helping to bring back custom development of applications, an option that has decreased in popularity. If code is flawed, the developer community can identify and address the problem quickly, where a single coder might plod on unawares, at least for a while.&lt;/p&gt;

&lt;p&gt;Closed-source software forces its users to trust the vendor when claims are made for qualities such as security, freedom from backdoors, adherence to standards and flexibility in the face of future changes. If the source code is not available those claims remain simply claims. Open source provides auditability. Open Source software provides further flexibility through freedom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What motivates open-source development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open source is an idea. You might agree with it or disagree. It depends on person and perspective.  The term “open source” requires that no one can discriminate against a group in not sharing the edited code or hinder others from editing their already-edited work. This approach to software development allows anyone to obtain and modify open source code. These modifications are distributed back to the developers within the open source community of people who are working with the software. In this way, the identities of all individuals participating in code modification are disclosed and the transformation of the code is documented over time.&lt;/p&gt;

&lt;p&gt;You might say, without pay or royalty licensing, there is little financial incentive for a programmer to become involved with a project in the first place, or to continue development and support once the initial product is released. But if you think for a developer perspective, Personal satisfaction also comes from the act of writing software as an equivalent to creative self-expression – it is almost equivalent to creating a work of art. The rediscovery of creativity, which has been lost through the mass production of commercial software products can be a relevant motivation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s for a CS Student, you ask?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You get to work on real-world problems, learn from experts, build a network and ofcourse, get discovered (that, in many cases, is the biggest hurdle). Your code is &lt;em&gt;out there&lt;/em&gt;. If you&amp;rsquo;re up for a job,  It shows recruiters that you are thinking about the greater context of your life and knowledge&amp;hellip; and not just about yourself. It shows you can work (minus, any training).&lt;/p&gt;

&lt;p&gt;I am a newbie myself and just started contributing for FOSS. &lt;em&gt;It&amp;rsquo;s great in here&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2015 19:55:33 +0530</pubDate>
        <link>/os/2015/05/27/understanding-foss/</link>
        <guid isPermaLink="true">/os/2015/05/27/understanding-foss/</guid>
      </item>
    
      <item>
        <title>Advice for students applying to Google Summer of Code 2016</title>
        <description>&lt;h3&gt;GSoC&#39;15 Selection - How this summer is shaping up to be the best ever!&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Some good news!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My proposal for Copyleft Games has been accepted for the prestigious &lt;a href=&quot;https://www.google-melange.com/gsoc/homepage/google/gsoc2015&quot;&gt;Google Summer of Code&lt;/a&gt; this year. The upcoming summer would be the best one I ever had. Google Summer of Code is a global program that offers students stipends to write code for open source projects.  I will be contributing for &lt;a href=&quot;http://pysoy.org/&quot;&gt;Pysoy&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What does it take to get accepted for GSoC?&lt;/h3&gt;

&lt;p&gt;I would love to share my experience on what it takes to get into GSoC. I hope it would help newcomers to get into the world of FOSS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You might not be the best programmer in your college, but you should believe in thyself.&lt;/em&gt; College grades do not matter. Neither do your linguistic skills. GSoC requires a certain passion and dedication towards your interests.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not an open source enthusiast and wouldn&amp;rsquo;t like to write open source code, then GSoC is not for you. The only difference for you should be that Google is providing stipend for you to do this.&lt;/p&gt;

&lt;p&gt;Selection of the organisation you want to work with is the most important factor. Being aware of the kind of organisation you want to contribute to is a very hard thing to do, and is one of the few steps where people go wrong. For this, you should shortlist your interests. Research about the organisation. Know what you are interested to work on. Choose a job you love, and you will never have to work a day in your life.&lt;/p&gt;

&lt;p&gt;Some organisations expect you to do minor bug fixing/ development tasks before accepting your proposal. Others are more interested in your profile and interest. It also depends on size/scale/platform of the project. There might be competency tests, one-on-one interviews e.t.c. My advice: Adopt. If you&amp;rsquo;re on a mailing list where every other candidate is fixing bugs, then do it. Otherwise, it&amp;rsquo;s more about bringing in ideas and perspective.&lt;/p&gt;

&lt;p&gt;Often, organisations are explicit about the same. You might want to check their GSoC pages/ consult with people from organisations that interests you. Do a lot of research on the organisation you want to work with. Services they build, languages they use (this shouldn&amp;rsquo;t be an issue) and if that interests you.&lt;/p&gt;

&lt;p&gt;Communication with the organisation is &lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt; important. An organisation gets tens if not hundreds of proposals, all equally good and qualified. How can they trust a random person, halfway round the globe? If you can show that you&amp;rsquo;re passionate enough to work, skilled enough to code and dedicated enough to be a long-term member of the community, you&amp;rsquo;re 100% in.&lt;/p&gt;

&lt;p&gt;Every organisation has it&amp;rsquo;s own way of communication. Some prefer &lt;a href=&quot;http://en.wikipedia.org/wiki/Mailing_list&quot;&gt;mailing lists&lt;/a&gt;, others the &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Relay_Chat&quot;&gt;IRC&lt;/a&gt; and a very few others use asana, bootcamp e.t.c. Whatever it might be, be an active member of it. Again, an important thing to remember is to make your presence felt amongst the developer community. This will help you at later stages of application process. But always remember to ask &lt;em&gt;intelligent &lt;/em&gt;questions. Never give a chance for someone to redirect you to this &lt;a href=&quot;http://www.giyf.com/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, understanding the codebase. This is a daunting process if you&amp;rsquo;re new. But a little perseverance can get you through this. You can always ask for help in your community discussion forums and help others whenever you can.&lt;/p&gt;

&lt;p&gt;Proposal writing is a tricky part. Opinions/ expectations differ. I would recommend writing proposal(s) for a single organisation. There&amp;rsquo;s no point in writing it for multiple organisations, it doesn&amp;rsquo;t increase your chances of selection. Also, you might write multiple proposals to the same organisation (at most 2, if you ask me).  Remember that proposals tend to change during the period. A good proposal would include motivation of why the project/idea is essential for the organisation, a precise description of the implementation process (or an idea of how you&amp;rsquo;re planning to implement), concrete milestones, and availability. The &amp;ldquo;about me&amp;rdquo; part is not important, you can provide an external link to your blog/ linkedin page e.t.c. Take extra care while writing blue sky proposals, make sure you get it verified by your mentors before you submit. Otherwise they might end up in spam.&lt;/p&gt;

&lt;p&gt;Write your proposal as early as possible and get it reviewed by your mentors. Sometimes, peer reviewing can also be done. I would recommend not to PM/ mail the mentors directly (or anyone else for that matter).  Also, don&amp;rsquo;t ping mentors unless it&amp;rsquo;s really necessary. Ask permission first, mailing etiquette matters a lot.&lt;/p&gt;

&lt;p&gt;After the proposal deadline, you might have to hang around in the IRC, solve some minor bugs, discuss implementation process of your project e.t.c. Because if you haven&amp;rsquo;t really proved your dedication/ coding skills to the organisation yet, your chances of getting accepted gets even slimmer, no matter how strong your application maybe.&lt;/p&gt;

&lt;p&gt;Luck always plays a major role in our lives. You might need a pint of &lt;a href=&quot;http://wow.gamepedia.com/Potion_of_Luck&quot;&gt;potion of luck&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;Acceptance/ rejection into the programme isn&amp;rsquo;t an indication of your coding skills or technical abilities. There might be millions of reasons for your rejection. Mentors may not be available, the organisation may not have enough slots for your project or it may not be the right time for your proposal.&lt;/p&gt;

&lt;p&gt;Just do your best and leave the rest!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I am fairly new to GSoC as this will be my first experience, all my views/opinions may not be authentic for some.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I am planning to blog my progress at least once in two weeks. I thought that would be a good way to gauge progress on my project. So stay tuned!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 23:45:00 +0530</pubDate>
        <link>/gsoc/2015/05/02/advice-for-students-applying-to-google-summer-of-code-2016/</link>
        <guid isPermaLink="true">/gsoc/2015/05/02/advice-for-students-applying-to-google-summer-of-code-2016/</guid>
      </item>
    
      <item>
        <title>[Pysoy] - Pysoy Development, Part One</title>
        <description>&lt;p&gt;&lt;em&gt;In this blogpost, I would like to describe the engine from a game developer&amp;rsquo;s perspective and as a general introduction to the organization and the engine itself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Future posts would include technical discussions, engine development e.t.c.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What exactly does copyleftgames do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;They maintain and license games!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They maintain gaming softwares under copyleft licenses (mostly GNU AGPLv3, I guess). And I’m planning to work on &lt;a href=&quot;http://www.pysoy.org/&quot;&gt;Pysoy&lt;/a&gt;, a cloud game engine. The games are intended to run on the server and playable on multiple devices. Well, pysoy along with &lt;a href=&quot;http://www.playerd.org/&quot;&gt;playerd&lt;/a&gt; (a service for abstacting input devices and user data) and &lt;a href=&quot;http://www.lightmelody.org/&quot;&gt;lightmelody&lt;/a&gt; ( a network library for cloud games) would facilitate gaming on a wide variety of devices to which pysoy is ported to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do I make pysoy games?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;Currently, developing games directly is pretty difficult. You will have to work more on the engine than your game itself to do so.&lt;/blockquote&gt;


&lt;p&gt;Get a linux machine. Download the engine (libsoy and pysoy) , build and install it. Once, installed you can import the the &lt;em&gt;soy&lt;/em&gt; module and use it.&lt;/p&gt;

&lt;p&gt;I won’t be discussing the installation process or any programming details here. This blogpost is an introduction to the engine itself.&lt;/p&gt;

&lt;p&gt;A simple scene can be written in ~40 lines of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding &lt;em&gt;soy&lt;/em&gt; package&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would like to give an introduction some on essential submodules and classes in soy module. For further details you can always look into pydocs associated with each module/class name.&lt;/p&gt;

&lt;blockquote&gt;To get help on any module/class, you type python3 -c “import soy; help(soy.)” in your command window.&lt;/blockquote&gt;


&lt;p&gt;First, the &lt;em&gt;Client&lt;/em&gt;. Clients in pysoy are intended to manage window creation, define context and data state of the object e.t.c. Currenty, the controllers are proposed to be managed by playerd and audio will soon be integrated as a texture to the body itself. Client instances are created locally with _soy.Client_object.&lt;/p&gt;

&lt;p&gt;Other essential submodules of the soy package includes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;atoms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bodies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scenes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;materials&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;textures&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;widgets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fields and joints&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;Atoms, &lt;/em&gt;as the name suggests are the building blocks. The data types that helps the other submodules. Atoms include Color, Position, Size, Rotation, Vector and many other essential classes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bodies &lt;/em&gt;are the objects in a scene. Matter that’s made up of atoms. They render to the scene, intercact, collide with each other. Sphere and Boxes are the obvious ones. Billboards and portals are examples of complicated bodies. Camera and Light are also considered as bodies&lt;em&gt; (&lt;/em&gt;Why?_ You will soon understand).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Scenes&lt;/em&gt; are where the bodies are present. It would contain geometry, viewpoint, texture, lighting, and shading information as a description of the virtual scene as in the real world. Room is the one that’s commonly used. Depending on the gameplay, scenes can be created. Typical examples include Room, Landscape and Space.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Materials&lt;/em&gt; govern the appearance of bodies in a scene. Materials define how the object looks and what properties can it have. Examples include Wireframed, Textured and Colored.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Texturing&lt;/em&gt; is the application of a type of surface to a 3D image. Heightmaps, Cubemaps, Bumpmaps are some trivial examples. SVGs can also be mapped to a material as a texture. Future iterations of the engine would include Audio as a texture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Widgets&lt;/em&gt; are the tricky ones, they define the rendering areas. Containers, Canvas and Projectors are few examples. Perhaps, Projector is the one that’s frequently used. It is used to “Project” the output of the camera to the screen. Widow objects can also be created from the Widgets submodule. They automatically create Client instances. comes&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fields&lt;/em&gt; effect the scenes. They manipulate the bodies inside that scene. Examples include Buoyancy, Wind e.t.c.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Joints&lt;/em&gt; connect bodies. They are typically used to create complex structures from primitive bodies. The anchor point of a joint is associated with that scene. Ball and Socket, Pivot e.t.c. are some examples.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The next blogpost would be related to the graphics and rendering part of the engine and it&amp;rsquo;s development.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Apr 2015 12:09:27 +0530</pubDate>
        <link>/gsoc/2015/04/22/pysoy-pysoy-development-part-one/</link>
        <guid isPermaLink="true">/gsoc/2015/04/22/pysoy-pysoy-development-part-one/</guid>
      </item>
    
      <item>
        <title>Source code management using GIT</title>
        <description>&lt;blockquote&gt;Here&#39;s my article for Sanchita-15 (Amrita School of Engineering - Annual Magazine).&lt;/blockquote&gt;


&lt;p&gt;Git is a distributed revision control and source code management system.  It was developed by Linus Torvalds, the father of Linux kernel. It is designed to handle everything from small to very large software projects with speed and efficiency. Projects that use git for their source code management include Linux Kernel, Android, Debian, GNOME, Ruby on Rails, VLC, e.t.c.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Software projects require collaboration of code. Software developers need to work simultaneously without overwriting each other’s changes as well as maintain a history of every version of software they release. This is where a version control system like git comes into picture. So, What is a version control system? It’s a software that helps software developers to work together and maintain a complete history of their work. A version control system allows you to track the history of a collection of files and includes the functionality to revert the collection of files to another version. Each version captures a snapshot of the files at a certain point in time. The collection of files is usually &lt;em&gt;source code&lt;/em&gt; for a programming language but a typical version control system can put any type of file under version control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a Distributed version control systems, DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As most of the operations are performed locally, it gives a huge benefit in terms of speed. Git does not rely on the central server; that is why, there is no need to interact with the remote server for every operation. The core part of Git is written in C, which avoids runtime overheads associated with other high-level languages. Though Git mirrors entire repository, the size of the data on the client side is small. This illustrates the efficiency of Git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project. This allows you to set up several types of workflows that aren’t possible in centralized systems, such as hierarchical models.&lt;/p&gt;

&lt;p&gt;Before we dive further into version controlling our software projects, let’s look at some terms associated with GIT.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Repository &lt;/em&gt;- The collection of files including the storage of their revision history.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Commit&lt;/em&gt; - A commit is an object of change done on the repository. It identifies a new revision of the content of the repository. Each commit object contains the author and the committer, thus making it possible to identify who did the change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Branch&lt;/em&gt; - A pointer to a commit. If you’re working on a certain branch, the creation of new commit advances this pointer to the newly created commit.&lt;/p&gt;

&lt;p&gt;Git allows the user to synchronize the local repository with other (remote) repositories.&lt;/p&gt;

&lt;p&gt;Users with sufficient authorization can &lt;em&gt;push&lt;/em&gt; changes from their local repository to remote repositories. They can also &lt;em&gt;fetch&lt;/em&gt; or &lt;em&gt;pull &lt;/em&gt;changes from other repositories to their local Git repository.&lt;/p&gt;

&lt;p&gt;Now that we understand what GIT is, let’s start using GIT in our own software projects&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SETUP GIT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Different releases of GIT can be downloaded from &lt;a href=&quot;http://git-scm.com/download/&quot;&gt;http://git-scm.com/download/&lt;/a&gt; for Windows, Mac OS X, Linux and Solaris. The installation process is as usual. Alternatively, there are various GUI clients available that helps you to manage you git repos efficiently. GitHub has many features including, GUI clients for each platform, hosts your static web repositories e.t.c.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CREATE A NEW REPOSITORY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new directory (New Folder), say ‘random_name’. Open it and perform a ‘git init’ to create a new repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CHECKOUT A REPOSITORY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a working copy of a local repository by running the command ‘git clone /path/to/repository/’ when using a remote server, your command will be ‘git clone username@host:/path/to/repository/’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WORKFLOW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your local repository consists of three ‘trees’ maintained by git. The first one is your ‘Working Directory’ (say, random_name) which holds the actual files. The second one is call the ‘Index’ which acts as a staging area and finally the ‘HEAD’ which points to the last commit you’ve made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ADD AND COMMIT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can propose changes (add it to the Index) using ‘git add &lt;filename&gt;’ of ‘git add *’ (To add all the files).This is the first step in the basic git workflow. To actually commit these changes use, ‘git commit -m ”commit_message”’.Now the file is committed to the HEAD, but not in your remote repository yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PUSHING CHANGES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have not cloned an existing repository and want to connect your repository to a remote server, you need to add it with, ‘git remote add origin &lt;server&gt;’. Now, you will be able to push your changes to the selected remote server, namely ‘master’.&lt;/p&gt;

&lt;p&gt;You are now in the HEAD of your local working copy. To send those changes to your remote repository, execute ‘git push origin master’. Change ’master’ to whatever branch you want to push changes to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE AND MERGE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To update your local repository to the newest commit, execute ‘git pull’ in your working directory to fetch and merge remote changes. To merge another branch into your active branch (e.g. master), use ‘git merge &lt;branch&gt;’. In both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. You should now merge these conflicts manually. After changing the files shown by the git, you need to mark them as merged with ‘git add &lt;filename&gt;’. Before merging changes, you can preview them using ‘git diff &lt;source_branch&gt; &lt;target_branch&gt;’.&lt;/p&gt;

&lt;blockquote&gt;Now, you should feel comfortable using Git and you can do all the basic local Git operations – creating or cloning a repository, making changes, staging and committing those changes, and viewing the history of all the changes the repository has been through. Feel free to use it in your software projects.&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 17 Apr 2015 20:57:41 +0530</pubDate>
        <link>/2015/04/17/source-code-management-using-git/</link>
        <guid isPermaLink="true">/2015/04/17/source-code-management-using-git/</guid>
      </item>
    
      <item>
        <title>Copyleftgames - Deferred Renderer</title>
        <description>&lt;h1&gt;Deferred Rendering pipeline for Pysoy&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Proposal for Google Summer of Code - 2015   CopyLeftGames.org&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;Personal details&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Sricharan Chiruvolu ( IRC - raincrash / sricharanized )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; sricharanized(at)gmail(dot)com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree:&lt;/strong&gt; B.Tech, Computer Science and Engineering&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;College/ Univ:&lt;/strong&gt; Amrita School of Engineering, Bengaluru, India&lt;/p&gt;

&lt;h1&gt;SYNOPSIS&lt;/h1&gt;

&lt;p&gt;Classing rendering (also called forward rendering) can, in the worst case, require num_objects * num_lights batches to render a scene. Deferred shading changes that to num_objects + num_lights, which can often be a lot less. We can thus achieve O(1) depth complexity for lighting. Memory is no longer an issue. So, pysoy can migrate to a deferred renderer.&lt;/p&gt;

&lt;p&gt;Aim to create a deferred rendering pipeline that is as unobtrusive as possible – we do not want the users of the engine to have to use it differently because of the way that its rendered. So, we want an engine that can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interact with the game engine in the same way that the forward renderer does.&lt;/li&gt;
&lt;li&gt;The pipeline switch should still be as flexible as forward rendering.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Working on optimization techniques including Stencil culling algorithm for rendering deferred lights and scissor rectangles. Multiple Render Targets (MRT) capability.&lt;/p&gt;

&lt;p&gt;Compactability of adding some advanced post-filters without another full scene render.&lt;/p&gt;

&lt;p&gt;The Deferred rendering architecture will include the following stages:
- Geometry stage 
- Lighting stage 
- Post-processing stage
- View stage&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;Motivation&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;In a standard forward rendering pipeline, the lighting calculations have to be performed on every vertex and on every fragment in the visible scene, for every light in the scene. The expensive lighting calculations have to execute for each visible fragment of every polygon on the screen, regardless if it overlaps or is hidden by another polygon&amp;rsquo;s fragments.&lt;/p&gt;

&lt;p&gt;Also, many of the fragments will never make it to the screen because they were removed with depth testing, and thus the lighting calculation was wasted on them.&lt;/p&gt;

&lt;p&gt;Classing rendering (also called forward rendering) can, in the worst case, require num_objects * num_lights batches to render a scene. Deferred shading changes that to num_objects + num_lights, which can often be a lot less. We can thus achieve O(1) depth complexity for lighting.&lt;/p&gt;

&lt;p&gt;If we migrate to deferred rendering pipeline we can easily extend the deferred renderer to calculate light volume mapping, extend to various post-effect schemes (new post-processing effects are easily achievable using the G-Buffer as input. If  we wanted to perform these effects without deferred shading, we would&amp;rsquo;ve had to render the whole scene again) e.t.c.&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;Project Proposal&lt;/em&gt;&lt;/h1&gt;

&lt;h2&gt;Implementation plan&lt;/h2&gt;

&lt;p&gt;Refactoring is the key. We will have to create a deferred rendering pipeline that is as unobtrusive as possible – we do not want the users of the engine to have to use it differently because of the way that its rendered. So, we want an engine that can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Interact with the game engine in the same way that the forward renderer does.&lt;/li&gt;
&lt;li&gt;The pipeline switch should still be as flexible as forward rendering.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The second issue is the optimization. We need to make sure G-Buffer pass is cheap. There are a lot of optimization methods that can be implemented, clipping, occlusion query, stencil cull, etc. We will be working on using Stencil culling algorithm for rendering deferred lights.&lt;/p&gt;

&lt;p&gt;In the beginning, all of the objects render their &amp;ldquo;lighting related info&amp;rdquo; to a texture, the G-Buffer. This means their colours, normals, depths and any other info that might be relevant to calculating their final colour.&lt;/p&gt;

&lt;p&gt;Then, the lights in the scene are rendered as geometry (sphere for point light, cone for spotlight and full screen quad for directional light), and they use the G-buffer to calculate the colour contribution of that light to that pixel.&lt;/p&gt;

&lt;p&gt;In order to write to all its buffers, it would require rendering one pass per buffer. However, if the current graphics card supports Multiple Render Targets (MRT) capability, it is possible to write to all buffers in a single pass. We won&amp;rsquo;t render the scene straight to the back buffer; instead we render everything into a bunch of textures using a multiple render target (MRT). With MRTs we can render into different textures with a single call. This will avoid to transform the vertices more than once boosting our performance.&lt;/p&gt;

&lt;h2&gt;Deferred Rendering&lt;/h2&gt;

&lt;p&gt;We will have four distinct stages in deferred shading: geometry stage, lighting stage, post-processing stage and final stage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will first implement a G-Buffer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Geometry stage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will make the G-Buffer as the current render target. Once that the G-buffer is ready to receive data, the scene will be rendered. Firstly, we update the G-buffer&amp;rsquo;s depth buffer. Next, material and geometric information of the scene are sent and a fragment shader is responsible for filling the rest of the G-buffer&amp;rsquo;s data.&lt;/p&gt;

&lt;p&gt;We have to postpone the transparent objects at this stage. An inspect pass will decide that the object is transparent, we will not add an auto-generated pass to the GBuffer, but instead copy it to render it regularly later (in final stage).&lt;/p&gt;

&lt;p&gt;Another way of handling transparent objects for cheap lighting is:  &lt;a href=&quot;http://www.john-chapman.net/content.php?id=13&quot;&gt;this&lt;/a&gt; . We can implement this idea as it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What data is passed to the G-Buffer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The four textures generated by the material pass would include: (a) normal, (b) diffuse, &amp;copy; specular and (d) encoded depth as color.Choosing a texture format is not a trivial decision, and has quite a big impact on performance. Further research will be done prior implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lighting stage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The output of the geometry stage is the G-Buffer contents. They are the normal, diffuse, spcular and depth maps and will be the input for our lighting pass shader together with per light related information like position, color and radius.&lt;/p&gt;

&lt;p&gt;We now have a prepared G-buffer with all the intermediate data we need to light the scene. Now, we will render each light to the scene, calculating its contribution to the final image.&lt;/p&gt;

&lt;p&gt;When using deferred shading we do not need to know what geometry is illuminated by what light and could just process all lights we find visible to the viewer. While we traverse the scene for visible geometry we simply store the lights we find on the way (so lights do not need to know which geometry they will influence).&lt;/p&gt;

&lt;p&gt;We will use view culling applied to the light volumes and some type of occlusion culling to try to reduce the number of lights we need to render.&lt;/p&gt;

&lt;p&gt;We will also be using &lt;a href=&quot;http://kayru.org/articles/deferred-stencil/&quot;&gt;Stencil culling algorithm&lt;/a&gt; for rendering deferred lights.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Post-processing stage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another advantage of deferred rendering, is that some advanced post-filters require full-scene renders to get intermediate information about the scene and use it. If the G-Buffer contains this information, we can apply these effects without another full scene render.&lt;/p&gt;

&lt;p&gt;We will make sure that it is easy to pass information (such as textures) from different render sequences to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Stage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final image is shown; swap the buffers and show the scene. This might scale the resulting image to fit the target view window dimensions as the buffers used for deferred shading can have a different resolution than the final screen resolution.&lt;/p&gt;

&lt;p&gt;At this stage, we can take care of the transparent objects, as mentioned &lt;a href=&quot;http://www.john-chapman.net/content.php?id=13&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus, a new rendering pipeline is developed.&lt;/p&gt;

&lt;h3&gt;References and cool links&lt;/h3&gt;

&lt;p&gt;I found the following references useful, although some not directly appropriate for our use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hal.inria.fr/inria-00480869/document&quot;&gt;Deferred Rendering Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://http.developer.nvidia.com/GPUGems3/gpugems3_ch19.html&quot;&gt;GPU Gems - Nvidia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/deferred-rendering-demystified-r2746&quot;&gt;Deferred Rendering Demystified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.john-chapman.net/content.php?id=13&quot;&gt;Transparency - A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://techblog.floorplanner.com/rendering-transparency-in-a-deferred-pipeline/&quot;&gt;Transparency - B&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Beyond GsoC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once such deferred renderer is developed, it can be extended to support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shadow mapping&lt;/li&gt;
&lt;li&gt;Light volume clipping&lt;/li&gt;
&lt;li&gt;Add new post-effects such as SSAO using the post-effect system&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will also be working on transition of ODE-based to a new physics engine.&lt;/p&gt;

&lt;p&gt;I will be contributing to the development of the organization, especially with adding WebGL and HTML (plugin free) client support.&lt;/p&gt;

&lt;p&gt;We can work on this as a non-deadline based project or chop them into various GCI tasks.&lt;/p&gt;

&lt;h1&gt;Availability&lt;/h1&gt;

&lt;p&gt;I’m pretty sure that i’ll be able to devote about 40 - 50 hours every week to the project during the GSoC coding period.&lt;/p&gt;

&lt;h1&gt;Issues/ Shortcomings&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;There are several algorithmic drawbacks with deferred shading - transparent objects are hard to handle, anti-aliasing can not be used on legacy hardware, additional memory consumption because of the G-Buffer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition to that, deferred shading is harder to implement - it overrides the entire pipeline. Pretty much everything is rendered using manual shaders - which probably means a lot of shader code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;About me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/index.html&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am planning to blog my progress atleast once in two weeks. I think this is a good way to post progress on my project.&lt;/p&gt;

&lt;p&gt;I am fairly new to GSoC as this will be my first experience, but I am looking forward to build this amazing application with you and begin my journey in Open Source!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 21:31:23 +0530</pubDate>
        <link>/gsoc/2015/03/30/copyleft-deferred-renderer/</link>
        <guid isPermaLink="true">/gsoc/2015/03/30/copyleft-deferred-renderer/</guid>
      </item>
    
      <item>
        <title>Copyleftgames - Physics Engine</title>
        <description>&lt;h1&gt;A Real-time Physics Engine for Pysoy&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Proposal for Google Summer of Code - 2015   CopyLeftGames.org&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;Personal details&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Sricharan Chiruvolu ( IRC - raincrash / sricharanized )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; sricharanized(at)gmail(dot)com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree:&lt;/strong&gt; B.Tech, Computer Science and Engineering&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;College/ Univ:&lt;/strong&gt; Amrita School of Engineering, Bengaluru, India&lt;/p&gt;

&lt;h1&gt;SYNOPSIS&lt;/h1&gt;

&lt;p&gt;Will be replacing the existing physics engine (ODE) with our own.&lt;/p&gt;

&lt;p&gt;Modified components would include the joints, bodies, fields, and most importantly, collisions between objects.
Collision primitives planning to support are sphere, box and plane.&lt;/p&gt;

&lt;p&gt;We will be addressing the following contact cases
- Point-point contacts
- edge-edge contacts
- edge-face contacts
- face-face contacts&lt;/p&gt;

&lt;p&gt;We will be addressing the following primitive collisions with seperate algorithms:
- Two spheres colliding
- Sphere and plane colliding
- Box and plane colliding
- Sphere and box colliding
- Two boxes colliding&lt;/p&gt;

&lt;p&gt;Most of the other higher geometric collisions can be based on the above.&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;Motivation&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;The proposed project aims to Improve the Pysoy&amp;rsquo;s physics system.&lt;/p&gt;

&lt;p&gt;Pysoy is currently dependent on ODE (Open Dynamics Engine) for dynamic simulation. ODE is a great resource, but it doesn&amp;rsquo;t meet the requirements that pysoy needs. Pysoy is proposed to run smoothly on both mobile and web and there is a need for a physics engine that is minimal, stable and more importantly, focussed on speed over accuracy. Pysoy doesn&amp;rsquo;t require a high-precision engine as there is a need for using simplified calculations and decreased accuracy to compute in time for the game to respond at an appropriate rate for gameplay. Higher precision reduces the positional/force errors, but at the cost do greater CPU power needed for the calculations, which is not desirable in our case.&lt;/p&gt;

&lt;p&gt;Thus, there is a need to replace the existing physics engine with our own. Modified components would include the joints, bodies, fields, and most importantly, collisions between objects.&lt;/p&gt;

&lt;h1&gt;&lt;em&gt;Project Proposal&lt;/em&gt;&lt;/h1&gt;

&lt;h2&gt;Implementation plan&lt;/h2&gt;

&lt;p&gt;Physics Engines, as the name implies are software that can simulate physics on a computer. These most commonly include rigid body dynamics such as simple convex primitives (boxes, spheres, cylinders, etc) colliding with each other and reacting to the resulting forces, but not deforming in the process, i.e. they maintain their shape and size and thus volume throughout the whole simulation. For reasons of computational complexity, the soft dody dynamics are used less-often, at least in real time physics simulations, where speed is of paramount importance.&lt;/p&gt;

&lt;p&gt;On the higher level, our physics engine cycle does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simulation: The engine goes through every object we are simulating, moves, rotates e.t.c and updates
everything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Detecting Collisions: All the geometries in the scene are tested against each other to see which ones collide and a list of colliding objects with their point of contacts is generated. Goes through every object in the simulation and basically, it creates a list of every pair of objects that has collided as a result of simulation. We are not trying to decide what should happen to these objects after collision in this stage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamically Responding to the collisions: Going through the list of all the pairs of colliding objects and decide how it should update them, how the collisions are to be handled e.t.c.
The cycle now starts again with simulation and so on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Detecting Collisions&lt;/h2&gt;

&lt;p&gt;This would be done in two phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A quick test to get a list of all possible colliding pairs can be done instead of directly calculating the contact points for each pair of bodies. This can be achieved by bounding volume principles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the above testing is done and we have detected the collisions between the bounding volumes, we are now in a position to carry out the full collision detection. Typically, we are comparing each geomentry with other in this stage. Different combinations of primitive collisions (shape vs shape) are to be implimented.
Various optimization methods can be incorporated while detecting collisions:
Instead of using the brute force O(n2) method of testing each geometry against each other, techniques such as spatial coherence (where the proximity of objects are found by diving­ up the space) and/or temporal coherence (where the fact that the results from one time step are usually closely related to the results from the previous timestep) can be done.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In addition, we can employ hierarchical bounding volumes, i.e. bounding volumes for each part of a larger geometry where we progressively test bounding volumes lower in the hierarchy upon successful collision tests.
Quadtrees might be an even more effective first-pass in collision detection algorithm. Analysing the difference between using quadtrees and using a simple fixed grid will be done prior to the implimentation.&lt;/p&gt;

&lt;p&gt;Collision primitives planning to support: sphere, box and plane.&lt;/p&gt;

&lt;h2&gt;Generating contacts, the joints and fields&lt;/h2&gt;

&lt;p&gt;Contact generation is more complex than single-intersection collision detection and takes more processor time to complete.&lt;/p&gt;

&lt;p&gt;Rather, we will have a two-stage process of contact generation: a fine collision detection step to determine whether there are contacts to generate and then a contact generation step to work out the contacts that are present. We need to make sure that fine collision detection runs as fast as possible. We can dramatically improve the speed by performing collision detection against a simplified geometry rather than the full-resolution rendering geometry.&lt;/p&gt;

&lt;p&gt;The problem is generating a collision geometry. Contact generation is an overhead. If this chunky geometry consists of certain geometric primitives—namely, spheres, boxes, planes, and capsules, then the collision detection algorithms can be simpler than for general-purpose meshes. How exactly such a geometry is generated is the question. I need to do a lot of research on this as there are very few resources I managed to find.
Once such mechanism is established, we can manage various permutations of primitives. The simplest shape on which to perform collision detection and contact generation on is the sphere. Despite being fast, however, spheres aren’t always terribly useful. Boxes are also relatively quick to process and can be used in more situations. What we also need to consider is the collision of objects with the background level geometry. Most commonly this means collisions with the ground or some other plane (walls can typically be represented as planes too). To support these, we’ll also consider collisions between primitives and planes.&lt;/p&gt;

&lt;p&gt;The contact data we will be looking for are the collision point and the collsion normal (stored as a data structure).With this, we will be addressing how each contact case and there parameters. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Point-point contacts&lt;/li&gt;
&lt;li&gt;edge-edge contacts&lt;/li&gt;
&lt;li&gt;edge-face contacts&lt;/li&gt;
&lt;li&gt;face-face contacts&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally, we will be addressing the following primitive collisions with seperate algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two spheres colliding&lt;/li&gt;
&lt;li&gt;Sphere and plane colliding&lt;/li&gt;
&lt;li&gt;Box and plane colliding&lt;/li&gt;
&lt;li&gt;Sphere and box colliding&lt;/li&gt;
&lt;li&gt;Two boxes colliding&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Most of the other higher geometric collisions can be based on the above.&lt;/p&gt;

&lt;h2&gt;Responding to the collisions&lt;/h2&gt;

&lt;p&gt;The collision detection stage returns the collision pairs (the constraints (contacts, joints) and world transforms) that are now solved in this step.&lt;/p&gt;

&lt;p&gt;This would be done in three phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mapping the given collision pairs into LCP (Linear complementary problem)&lt;/li&gt;
&lt;li&gt;Solving the LCP equations. Implementing numerical integration techniques: Euler’s method (for conceptual understanding), velocity verlet (for most simple games/kinematics), midpoint method (for most simple applications/general forces), Runge-Kutta methods (for advanced and accurate simulation).&lt;/li&gt;
&lt;li&gt;Map back the calculated results to the scene. This involves the calcuated force, integrate them to get velocity and new positions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Understanding and implementing various algorithms like separating axis theorem GJK algorithm will optimise the calculation overload both in detecting collision stage and responding to collision stage. Further research will be done prior to the implimentation.&lt;/p&gt;

&lt;p&gt;Contact resolution is a way in which touching objects are processed. We won&amp;rsquo;t be using “Jacobian-based” approach, a physically realistic way to calculate the exact interaction between different contacts and calculate an overall set of effects to apply. It suffers from being very time consuming, complex math is involved, solving the equations require “millions” of calculations.
Instead, we will be calculating a new set of equations based on the contacts and constraits between objects. Rather than use Newton’s laws of motion, we can create our own set of laws for just the specific configuration of objects we are dealing with.&lt;/p&gt;

&lt;h2&gt;References and cool links&lt;/h2&gt;

&lt;p&gt;I found the following references useful, although not directly appropriate for our use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www-cs-students.stanford.edu/~eparker/files/PhysicsEngine/&quot;&gt;Rigid Body Physics Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.ubc.ca/~rbridson/docs/rigid_bodies.pdf&quot;&gt;Nonconvex Rigid Bodies with Stacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And ofcourse, &lt;a href=&quot;https://sourceforge.net/projects/opende/files/&quot;&gt;ODE&lt;/a&gt; codebase.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Beyond GsoC&lt;/h2&gt;

&lt;p&gt;I will be contributing to the development of the organization, especially with adding WebGL and HTML (plugin free) client support. There will always be something that needs improvement in a constantly evolving organization.&lt;/p&gt;

&lt;p&gt;Also, the physics engine would have a lot of improvizations that need to be addressed. Including,
Soft body physics support:  The scope of soft body dynamics is quite broad, ranging form bouncing, bending and squishing, including simulation of soft organic materials such as muscle, fat, hair and vegetation, as well as other deformable materials such as clothing and fabric. This is really a broad concept. But, once a physics engine is wireframed, the softbody support can get into it pretty easily.
Maybe, boyancy too.&lt;/p&gt;

&lt;p&gt;Handling wheeled, bipedal moments seperately:  Handling bipedal characters separately would be a great benefit for future game devs. There would be a collision joint that is unique for bipedal characters rather than depending of the native physics engine.&lt;/p&gt;

&lt;p&gt;We can work on this as a non-deadline based project or chop them into various GCI tasks.&lt;/p&gt;

&lt;h1&gt;Availability&lt;/h1&gt;

&lt;p&gt;I’m pretty sure that i’ll be able to devote about 40 - 50 hours every week to the project during the GSoC coding period.&lt;/p&gt;

&lt;h1&gt;Issues/ Shortcomings&lt;/h1&gt;

&lt;p&gt;As such, the limitation of any physics engine is the approximation of the positions and forces acting upon an object. These approximations can sometimes lead to drastic changes in the behaviour of the bodies.
This issue can be compromised if the engine can deliver  “realistic enough” results without consuming greater CPU powers needed for the calculations.&lt;/p&gt;

&lt;h1&gt;About me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/index.html&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am planning to blog my progress atleast once in two weeks. I think this is a good way to post progress on my project.&lt;/p&gt;

&lt;p&gt;I am fairly new to GSoC as this will be my first experience, but I am looking forward to build this amazing application with you and begin my journey in Open Source!&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Mar 2015 21:31:23 +0530</pubDate>
        <link>/gsoc/2015/03/29/copyleft-physics-engine/</link>
        <guid isPermaLink="true">/gsoc/2015/03/29/copyleft-physics-engine/</guid>
      </item>
    
      <item>
        <title>Writing Kernel Modules::Multiple file modules</title>
        <description>&lt;p&gt;Before we get into the real stuff, there are a few must-knows that are worth discussing. Note the our purpose of this tutorial set is to write our own LKMs and Rootkits for our own purposes. Few of them might have to be written in multiple files or require some arguments to be passed. We will discuss these issues now.
&lt;strong&gt;
Command-line Arguments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command-line arguments are declared by defining the variables that take these arguments as global and using the &lt;code&gt;module_param()&lt;/code&gt; macro. The variable declaration is usually described at the beginning of the module. The &lt;code&gt;insmod&lt;/code&gt; is used to pass the values at runtime. Arrays of Integers or Strings are called using &lt;code&gt;module_param_array&lt;/code&gt; and &lt;code&gt;module_param_string&lt;/code&gt; macros.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;module_param_desc&lt;/code&gt; is used to document arguments that the module can take.&lt;/p&gt;

&lt;p&gt;This is how command-line variables are declared.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;
int number = 100;
module_param(number, int , 0); // module_param(variable_name, variable_type , permissions);

// This is how arrays are declared

int numberArray[5];
module_param_array(numberArray, int, NULL, 0); /* not interested in count */

int numberArray2[30];
int count;
module_param_array(numberArray2, short, count, 0); /* put count into &quot;count&quot; variable */

&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a sample program using command-line arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;
/*  
    Using Command-line arguments
    Author: Sricharan Chiruvolu
    Date: 14 Dec 2014
 */
#include &amp;lt;linux/module.h&amp;gt;    
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;
#include &amp;lt;linux/moduleparam.h&amp;gt;
#include &amp;lt;linux/stat.h&amp;gt;


#define DRIVER_AUTHOR &quot;Sricharan Chiruvolu &quot;
#define DRIVER_DESC   &quot;The First Program - Template&quot;

//Declaring a few variables...
static short int short_number = 1;
module_param(short_number, short, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
MODULE_PARM_DESC(short_number, &quot;A short Number&quot;);


static int number = 54;
module_param(number, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
MODULE_PARM_DESC(number, &quot;A Number&quot;);


static long int long_number = 33553466;
module_param(long_number, short, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
MODULE_PARM_DESC(long_number, &quot;A long Number&quot;);


static char *char_string = &quot;Hello&quot;;
module_param(char_string, charp, 0000);
MODULE_PARM_DESC(char_string, &quot;A character string&quot;);

static int __init first_init(void)
{
    int integerA;
    printk(KERN_INFO &quot;This is our first program.&quot;);
    printk(KERN_INFO &quot;short_number is a short integer: %hd\n&quot;, short_number);
    printk(KERN_INFO &quot;number is an integer: %d\n&quot;, number);
    printk(KERN_INFO &quot;long_number is a long integer: %ld\n&quot;, long_number);
    printk(KERN_INFO &quot;char_string is a string: %s\n&quot;, char_string);

    return 0;
}

static void __exit first_exit(void)
{
    printk(KERN_ALERT &quot;End of our first program.&quot;);
}

module_init(first_init);
module_exit(first_exit);
MODULE_LICENSE(&quot;GPL&quot;);
MODULE_AUTHOR(DRIVER_AUTHOR);   
MODULE_DESCRIPTION(DRIVER_DESC);

/*  
 *  This module uses /dev/testdevice.  The MODULE_SUPPORTED_DEVICE macro might
 *  be used in the future to help automatic configuration of modules, but is 
 *  currently unused other than for documentation purposes.
 */
MODULE_SUPPORTED_DEVICE(&quot;testdevice&quot;);

&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we know how to send command-line arguments let&amp;rsquo;s. We will next see how multiple file modules work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Quite often, it is logically suitable to write multi-file kernel modules. Let&amp;rsquo;s write one now. We will use two files &lt;code&gt;third_one.c&lt;/code&gt; and &lt;code&gt;third_one.c&lt;/code&gt; for this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;third_one.c&lt;/code&gt; will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;
/*  
    Using multiple files - Part one
    Author: Sricharan Chiruvolu
    Date: 16 Dec 2014
 */
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/module.h&amp;gt;
int init_module(void)
{
    printk(KERN_INFO &quot;Hello, world - this is the kernel speaking\n&quot;);
    return 0;
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the other one, &lt;code&gt;third_two.c&lt;/code&gt; will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;
/*  
    Using multiple files - Part two
    Author: Sricharan Chiruvolu
    Date: 16 Dec 2014
 */

#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/module.h&amp;gt;

void cleanup_module()
{
    printk(KERN_INFO &quot;Short is the life of a kernel module\n&quot;);
}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that it&amp;rsquo;s just the same program as our &lt;a href=&quot;http://sricharanized.wordpress.com/2014/12/14/writing-kernel-modules-lesson-five-our-first-kernel-module/&quot;&gt;first&lt;/a&gt; but is in two different files.&lt;/p&gt;

&lt;p&gt;We are only supposed to change our Makefile to build both the object files of our program one after the other and create a combined object code. The modified &lt;code&gt;Makefile&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;
obj-m += combined_module.o
combined_module-objs := third_one.o third_two.o

all:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now run &lt;code&gt;make&lt;/code&gt; command to find the &lt;code&gt;combined_module.ko&lt;/code&gt; kernel module.&lt;/p&gt;

&lt;p&gt;We have successfully written a basic multi-file kernel module. In the next tutorial, we will discuss about character device drivers. So, stay tuned.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Dec 2014 14:08:28 +0530</pubDate>
        <link>/os/2014/12/15/writing-kernel-modules-lesson-five-multiple-file-modules-argument-passing/</link>
        <guid isPermaLink="true">/os/2014/12/15/writing-kernel-modules-lesson-five-multiple-file-modules-argument-passing/</guid>
      </item>
    
  </channel>
</rss>